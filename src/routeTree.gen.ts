/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as privateDashboardImport } from "./routes/(private)/dashboard";
import { Route as privateDashboardIndexImport } from "./routes/(private)/dashboard/index";
import { Route as publicLoginImport } from "./routes/(public)/login";
import { Route as IndexImport } from "./routes/index";

// Create/Update Routes

const IndexRoute = IndexImport.update({
	id: "/",
	path: "/",
	getParentRoute: () => rootRoute,
} as any);

const publicLoginRoute = publicLoginImport.update({
	id: "/(public)/login",
	path: "/login",
	getParentRoute: () => rootRoute,
} as any);

const privateDashboardRoute = privateDashboardImport.update({
	id: "/(private)/dashboard",
	path: "/dashboard",
	getParentRoute: () => rootRoute,
} as any);

const privateDashboardIndexRoute = privateDashboardIndexImport.update({
	id: "/",
	path: "/",
	getParentRoute: () => privateDashboardRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
	interface FileRoutesByPath {
		"/": {
			id: "/";
			path: "/";
			fullPath: "/";
			preLoaderRoute: typeof IndexImport;
			parentRoute: typeof rootRoute;
		};
		"/(private)/dashboard": {
			id: "/(private)/dashboard";
			path: "/dashboard";
			fullPath: "/dashboard";
			preLoaderRoute: typeof privateDashboardImport;
			parentRoute: typeof rootRoute;
		};
		"/(public)/login": {
			id: "/(public)/login";
			path: "/login";
			fullPath: "/login";
			preLoaderRoute: typeof publicLoginImport;
			parentRoute: typeof rootRoute;
		};
		"/(private)/dashboard/": {
			id: "/(private)/dashboard/";
			path: "/";
			fullPath: "/dashboard/";
			preLoaderRoute: typeof privateDashboardIndexImport;
			parentRoute: typeof privateDashboardImport;
		};
	}
}

// Create and export the route tree

interface privateDashboardRouteChildren {
	privateDashboardIndexRoute: typeof privateDashboardIndexRoute;
}

const privateDashboardRouteChildren: privateDashboardRouteChildren = {
	privateDashboardIndexRoute: privateDashboardIndexRoute,
};

const privateDashboardRouteWithChildren =
	privateDashboardRoute._addFileChildren(privateDashboardRouteChildren);

export interface FileRoutesByFullPath {
	"/": typeof IndexRoute;
	"/dashboard": typeof privateDashboardRouteWithChildren;
	"/login": typeof publicLoginRoute;
	"/dashboard/": typeof privateDashboardIndexRoute;
}

export interface FileRoutesByTo {
	"/": typeof IndexRoute;
	"/login": typeof publicLoginRoute;
	"/dashboard": typeof privateDashboardIndexRoute;
}

export interface FileRoutesById {
	__root__: typeof rootRoute;
	"/": typeof IndexRoute;
	"/(private)/dashboard": typeof privateDashboardRouteWithChildren;
	"/(public)/login": typeof publicLoginRoute;
	"/(private)/dashboard/": typeof privateDashboardIndexRoute;
}

export interface FileRouteTypes {
	fileRoutesByFullPath: FileRoutesByFullPath;
	fullPaths: "/" | "/dashboard" | "/login" | "/dashboard/";
	fileRoutesByTo: FileRoutesByTo;
	to: "/" | "/login" | "/dashboard";
	id:
		| "__root__"
		| "/"
		| "/(private)/dashboard"
		| "/(public)/login"
		| "/(private)/dashboard/";
	fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
	IndexRoute: typeof IndexRoute;
	privateDashboardRoute: typeof privateDashboardRouteWithChildren;
	publicLoginRoute: typeof publicLoginRoute;
}

const rootRouteChildren: RootRouteChildren = {
	IndexRoute: IndexRoute,
	privateDashboardRoute: privateDashboardRouteWithChildren,
	publicLoginRoute: publicLoginRoute,
};

export const routeTree = rootRoute
	._addFileChildren(rootRouteChildren)
	._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(private)/dashboard",
        "/(public)/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(private)/dashboard": {
      "filePath": "(private)/dashboard.tsx",
      "children": [
        "/(private)/dashboard/"
      ]
    },
    "/(public)/login": {
      "filePath": "(public)/login.tsx"
    },
    "/(private)/dashboard/": {
      "filePath": "(private)/dashboard/index.tsx",
      "parent": "/(private)/dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
